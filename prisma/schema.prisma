// Defining the datasource, which specifies the database provider (MySQL),
// connection URL, and relation mode for Prisma.
datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Defining the Prisma generator for generating the Prisma client.
generator client {
  provider = "prisma-client-js"
}

// Defining the "Profile" model with its fields and relationships.
model Profile {
  id       String @id @default(uuid())
  userId   String @unique
  name     String
  imageUrl String @db.Text
  email    String @db.Text

  // Relationships
  servers  Server[] // A profile can be associated with multiple servers.
  members  Member[] // A profile can be a member of multiple servers.
  channels Channel[] // A profile can have multiple channels.

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Defining the "Server" model with its fields and relationships.
model Server {
  id         String @id @default(uuid())
  name       String
  imageUrl   String @db.Text
  inviteCode String @unique

  // Relationships
  profileId String // Each server is associated with a profile (owner).
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  members  Member[] // A server can have multiple members.
  channels Channel[] // A server can have multiple channels.

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
}

// Enum for different member roles in a server.
enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

// Defining the "Member" model with its fields and relationships.
model Member {
  id   String     @id @default(uuid())
  role MemberRole @default(GUEST)

  // Relationships
  profileId String // Each member is associated with a profile.
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String // Each member is associated with a server.
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages       Message[]
  directMessages DirectMessage[]

  conversationsInitiated Conversation[] @relation("MemberOne")
  conversationsReceived  Conversation[] @relation("MemberTwo")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}

// Enum for different channel types.
enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

// Defining the "Channel" model with its fields and relationships.
model Channel {
  id   String      @id @default(uuid())
  name String
  type ChannelType @default(TEXT)

  // Relationships
  profileId String // Each channel is associated with a profile.
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String // Each channel is associated with a server.
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([serverId])
  @@index([profileId])
}

model Message {
  id       String  @id @default(uuid())
  content  String  @db.Text // Content of message
  fileUrl  String? @db.Text // Optional file Url
  memberId String // Sender of message
  member   Member  @relation(fields: [memberId], references: [id], onDelete: Cascade)

  channelId String // Channel this message is being sent to
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([channelId])
  @@index([memberId])
}

model Conversation {
  id String @id @default(uuid())

  memberOneId String
  memberOne   Member @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)

  memberTwoId String
  memberTwo   Member @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)

  directMessages DirectMessage[]

  @@unique([memberOneId, memberTwoId])
  @@index([memberTwoId])
}

model DirectMessage {
  id      String  @id @default(uuid())
  content String  @db.Text
  fileUrl String? @db.Text

  memberId String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  deleted Boolean @default(false)

  @@index([memberId])
  @@index([conversationId])
}
